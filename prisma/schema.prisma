// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  teamId    String?
  playerId  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id             String       @id @default(cuid())
  sport          SportType
  gameDate       DateTime
  homeTeamId     String
  awayTeamId     String
  homeTeamName   String
  awayTeamName   String
  homeTeamScore  Int?
  awayTeamScore  Int?
  status         GameStatus   @default(SCHEDULED)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  predictions    Prediction[]
  playerProps    PlayerProp[]
}

model Prediction {
  id              String          @id @default(cuid())
  gameId          String
  predictionType  PredictionType
  predictionValue String
  confidence      Float           @db.DoublePrecision // 0-1 value representing confidence
  reasoning       String          @db.Text
  outcome         PredictionOutcome?
  createdAt       DateTime        @default(now())
  game            Game            @relation(fields: [gameId], references: [id])
}

model PlayerProp {
  id              String          @id @default(cuid())
  gameId          String
  playerId        String
  playerName      String
  teamId          String
  propType        PropType
  overUnderValue  Float           @db.DoublePrecision
  predictionValue String
  confidence      Float           @db.DoublePrecision
  reasoning       String          @db.Text
  outcome         PredictionOutcome?
  createdAt       DateTime        @default(now())
  game            Game            @relation(fields: [gameId], references: [id])
}

enum SportType {
  NBA
  MLB
}

enum GameStatus {
  SCHEDULED
  LIVE
  FINISHED
  CANCELLED
}

enum PredictionType {
  SPREAD
  MONEYLINE
  OVER_UNDER
  PLAYER_PROP
}

enum PropType {
  POINTS
  REBOUNDS
  ASSISTS
  STRIKEOUTS
  HITS
  HOME_RUNS
  TOTAL_BASES
  STOLEN_BASES
  OTHER
}

enum PredictionOutcome {
  WIN
  LOSS
  PUSH
  VOID
} 